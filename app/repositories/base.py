from typing import Optional, Protocol

from app.domain.models import Chunk, Document, Library


class LibraryRepository(Protocol):
    def create_library(self, library: Library) -> Library: ...

    def get_library(self, library_id: str) -> Optional[Library]: ...

    def list_libraries(self) -> list[Library]: ...

    def update_library(self, library: Library) -> Library: ...

    def delete_library(self, library_id: str) -> None: ...


class DocumentRepository(Protocol):
    def create_document(self, document: Document) -> Document: ...

    def get_document(self, document_id: str) -> Optional[Document]: ...

    def list_documents(self, library_id: str) -> list[Document]: ...

    def update_document(self, document: Document) -> Document: ...

    def delete_document(self, document_id: str) -> None: ...


class ChunkRepository(Protocol):
    def create_chunk(self, chunk: Chunk) -> Chunk: ...

    def get_chunk(self, chunk_id: str) -> Optional[Chunk]: ...

    def list_chunks(self, library_id: str) -> list[Chunk]: ...

    def update_chunk(self, chunk: Chunk) -> Chunk: ...

    def delete_chunk(self, chunk_id: str) -> None: ...


class VectorRepository(Protocol):
    def create_library(self, library: Library) -> Library: ...

    def get_library(self, library_id: str) -> Optional[Library]: ...

    def list_libraries(self) -> list[Library]: ...

    def update_library(self, library: Library) -> Library: ...

    def delete_library(self, library_id: str) -> None: ...

    def create_document(self, document: Document) -> Document: ...

    def get_document(self, document_id: str) -> Optional[Document]: ...

    def list_documents(self, library_id: str) -> list[Document]: ...

    def update_document(self, document: Document) -> Document: ...

    def delete_document(self, document_id: str) -> None: ...

    def create_chunk(self, chunk: Chunk) -> Chunk: ...

    def get_chunk(self, chunk_id: str) -> Optional[Chunk]: ...

    def list_chunks(self, library_id: str) -> list[Chunk]: ...

    def update_chunk(self, chunk: Chunk) -> Chunk: ...

    def delete_chunk(self, chunk_id: str) -> None: ...

    def snapshot(self) -> dict[str, list[dict]]: ...

    def load_snapshot(self, data: dict[str, list[dict]]) -> None: ...
